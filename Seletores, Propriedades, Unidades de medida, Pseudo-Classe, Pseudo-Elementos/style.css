                /*SELETORES*/

*{ /*SELETOR UNIVERSAL - TODA A P√ÅGINA*/
    margin: 0;
    padding: 0;
}

input[type="nome"], 
h1[class="titulo"]{ /*informar no []  atributo e o valor que o elemento precisa ter*/
    background-color: crimson; /*alterando cor de fundo do input especifico - com "nome"*/
}

h1,h2,h3{/*EXEMPLO DE SELETOR DE TEXTO*/
}

.container{/*SELETOR UNIVERSAL - TODA A P√ÅGINA*/
}

p.azul{   /*SELETOR DE CLASSE DENTRO DE ELEMENTO (NO CASO, PARAGRAFO COM CLASSE AZUL)*/
}

p .azul{   /*SELETOR DE CLASSE DENTRO DE ELEMENTO (NO CASO, PARAGRAFO COM UM ELEMENTO C/ CLASSE AZUL DENTRO DELE, EX: <p><a class="azul"></a></p>)*/
}

#cabecalho { /*SELECIONA PELO ID*/
} 

li>a { /*SELECIONA O FILHO DIRETO (NO CASO, LINK DENTRO DA LISTA)*/     
}


p a { /*SELECIONA TODOS OS DESCENDENTES (NO CASO, ESTILO EM TODOS OS LINKS QUE ESTIVEREM DENTRO DE UM PARAGRAFO)*/
} 

h1+p { /*SELECIONA O PR√ìXIMO IRM√ÉO ADJACENTE (NO CASO, H1 EST√Å EM UMA LINHA ACIMA DE P - LOGO, SE TIVER 2 P o segundo P n√£o ser√° estilizado, somente o primeiro, que √© adjacente de h1)*/
}

h1~p{ /*SELECIONA O IRM√ÉO GERAL (M√öLTIPLOS) - NO CASO, TODOS OS PARAGRAFOS DEPOIS DE H1,
       INDEPENDENTE DA ORDEM DA LINHA OU SE VEM ALGO DIFERENTE DE P DEPOIS DE H1 - N√ÉO SELICIONA PARAGRAFOS QUE EST√ÉO ANTES H1-*/
}

/*ORDEM DE PRIORIDADE DOS SELETORES: IF>ATRIBUTO/CLASS>TAG>UNIVERSAL*/
/*# = ID;   . = CLASS; : = ESTADO; [] = ATRIBUTO; * = TOTAL;*/




                /*ALGUMAS PROPRIEDADES*/
.teste{
    overflow: hidden; /* os elementos que transbordarem estar√£o escondidos*/
    overflow: scroll; /* cria um scroll dentro dos limites do elemento*/
    cursor: pointer; /* muda o cursor do usuario*/
    box-shadow: 20px 10px 8px green; /*tamanho da sombra horizontal -> tamanho da sombra vertical -> blur -> cor*/
    border: 4mm ridge red; /*borda com sombra interna*/
    border: thick double #32a1ce; /*borda com duas linhas*/
    border: 1rem solid;
    border: solid;
    border: dashed red;
    border: 10px outset;
    border-top-width: medium;
    border-right-width: medium;
    border-bottom-width: medium;
    border-left-width: medium;
    border-top-style: none;
    border-right-style: none;
    border-top-color: currentcolor;
    border-right-color: currentcolor;
    border: inherit; /*for√ßar propriedade herdar valor do elemento pai - exemplo: red*/
    border: initial; /*estado inicial - no caso pode ser a cor preta, dependendo do navegador*/
    border: revert;
    border: revert-layer;
    border: unset;
}

/*
div {
    border: 0.5rem outset pink;
    outline: 0.5rem solid khaki;
    box-shadow: 0 0 0 2rem skyblue;
    border-radius: 12px;
    font: bold 1rem sans-serif;
    margin: 2rem;
    padding: 1rem;
    outline-offset: 0.5rem;
  } */



                /*UNIDADES DE MEDIDA*/

p{
    font-size: 16px; /*px = unidade absoluta - n√£o se altera - pode acabar atrapalhando na acessibilidade*/
    font-size: 1em; /*em = relativa ao elemento pai - multiplica o valor de referencia - tambem se adapta caso o usuario altere o tamanho da fonte do proprio navegador*/
    /*Se o elemento pai tiver 30px o o elemento filho tiver 2em, o filho ter√° 60px*/
    
    font-size: 16rem; /*rem = unidade relativa ao elemento raiz do HTML - no caso, a propria tag HTML -> s√≥ muda se houver alguma altera√ß√£o na tag HTML ou caso o usuario altere o tamanho da fonte do navegador*/
    /*rem e o px s√£o os mais utilizados*/

    font-size: 60vh; /*vv = referente a altura da tela (no caso, ocupando 60% da altura da tela)*/
    font-size: 80vw; /*vv = referente a largura da tela (no caso, ocupando 60% da largura da tela)*/

    font-size: 60ch; /*ch = caracteres de largura (do caracter 0) no maximo*/
}



                /*Cascata (ordem de que se coloca algo)*/

h1{
    color: red;
}

  
h1{
    color: green; /*a cor a ser atribuida ao h1 ser√° verde - ignorando a cor vermelha - pois o que vem depois tem mais prioridade*/
}



  /*Especificidade*/
h1{
    color: red;
}

.textoComClasseH1{
    color: blue; /*a cor a ser atribuida ao h1 ser√° azul - ignorando a cor vermelha e verde - pois especificidade (a classe) tem mais tem mais prioridade*/
}
  
h1{
    color: green; 
}


/*ORDEM DE PRIORIDADE (do MAIS ao MENOS): 
Inline (style=" ") -> ID (#) -> Classes, Atributos e Pseudo-Classes (. :: [ ]) -> Elementos e Pseudo-Elementos ( : <>)


<p>Par√°grafo teste </p>

                    prioridade (da Menor a Maior)
P {}               ‚ûî 0-0-0-1
P::before {}       ‚ûî 0-0-0-2
.destaque {}       ‚ûî 0-0-1-0
#destaque {}       ‚ûî 0-1-0-0
#destaque p {}     ‚ûî 0-1-0-1
(inline) style=*   ‚ûî 1-0-0-0
!important         ‚ûî ignora todas as anteriores e se torna prioridade

*/



                /* Heran√ßa*/
/*

    <div>          -> pai
        <p></p>    -> filho 
        <h1></h1>  -> filho e irm√£o adjacente de <p>
    </div>
*/



                /*Pseudo-classes*/
/*H√° Pseudo-classes com : ou ::
relacionadas ao estado do elemento
como verificar? 
-> verificar se o elemento √© (√© o 1 filho/ √© o 5 filho etc...) ou est√° (o elemento est√° desabilitado? o elemento est√° com foco? o elemento est√° marcado? etc...)

https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes */

a:link{ /*links que ainda n√£o foram visitados ficar√£o verdes*/
    color: lime;
}

a:visited{ /*links que foram visitados ficar√£o vermelhos*/
    color: red;
}

a:hover{ /*quando passar o mouse - muda a cor */
    color: rgb(0, 255, 255);
}

a:first-child{ /*o primeiro elemento/primeiro filho*/
    color: brown;
}

a:last-child{ /*o √∫ltimo elemento/√∫ltimo filho*/
    color: rgb(42, 44, 165);
}

a:nth-child(4){ /*Alterar somente o item do meio de uma lista (por exemplo) - dentro do parenteses se passa o numero do elemento a se alterar (quarto elemento = 4)*/
    color: rgb(106, 165, 42);
}

a:nth-child(even){ /*Alterar somente os elementos pares*/
    color: rgb(155, 42, 165);
}

a:nth-child(odd){ /*Alterar somente os elementos impares*/
    color: rgb(42, 165, 163);
}



    /*Pseudo-Elementos*/
/*Usam ::
usado para utilizar uma parte de tal elemento (algo que precisaria criar um outro elemento para aplicar tal estilo ou incluir um texto)
Ex: em vez de usar a tag <b> pra deixar em negrito a primeira linha, poderia usar o pseudo-elemento ::first-line e uma propriedade para deixar a primeira linha em negrito


https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-Elements
*/

p::first-line{ /*alterar somente a primeira linha -> colorindo dinamicamente as palavras na primeira linha de acordo com o tamanho da tela*/
    color: red;
}

p::first-letter{ /*alterar somente a primeira letra */
    color: rgb(0, 255, 38);
}

p::selection{ /*alterar quando o user selecionar*/
    background-color: rgb(234, 255, 0);
}


li::before{                 /*adicionando no inicio de algo*/
  content: "üòÅ";            /* before e after fazem o uso de content (conte√∫do)*/
                            /*content aceita textos, espa√ßos, emojis etc...*/
  background-color: aquamarine;
}



li::after{          /*alterar quando o user selecionar*/
    content: " üòö"; /* before e after fazem o uso de content (conte√∫do)*/
                    /*content aceita textos, espa√ßos, emojis etc...*/
}



                /*CSS Display

div{
    display: block; padr√£o, um embaixo do outro, pula uma linha, usa todo espa√ßo disponivel na tela - aceita altura e largura etc...
    display: inline; um do lado do outro, ignora largura
    display: inline-block; come√ßa a ficar um do lado do outro, na mesma linha, assim que houver o espa√ßo necessario na tela - aceita altura e largura
    display: none; n√£o apresenta o elemento, mas ele continua presente
    display: grid;
    display: flex;
}



                CSS POSITIONS

div{
    position: static; padr√£o - respeita a ordem (o fluxo) que os elementos aparecem na tela - Ex.: 1,2,3,4
    position: relative; ela respeita o fluxo (se mantem nele) por√©m permite utilizar as propriedades top, right, bottom e left para move-l√° (e o espa√ßo dela continua no fluxo e nao altera os outros elementos)                 
    position: absolute; segue um elemento pai com position diferente de static ou a propria p√°gina - remove o elemento do fluxo e fica por cima - por√©m permite utilizar as propriedades top, right, bottom e left para move-l√°
    position: fixed; remove o elemento do fluxo - mantem o elemento fixo na tela acompanha o scroll - √© em rela√ß√£o a toda a tela - bom para menu fixo
    position: sticky; remove o elemento do fluxo - se mantem em uma posi√ß√£o na tela, mas quando o scroll desce e encosta na sua parte superior o elemento se fixa e desce na tela junto com o scroll - sticky = grudar, pegajoso - bom para cabe√ßalhos de tabelas
}



                Modelo de Caixa CSS (box-model)
div{
    box-sizing: content-box; padr√£o - adiciona espa√ßo ao tamanho
    box-sizing: border-box; diminui espa√ßo ao tamanhoo - proprio navegador faz o calculo para caber o elemento certinho na borda
} 



               /*GRID CSS

-Um recurso do CSS que permite desenvolver layouts em grid;
-√â um valor da propriedade display;
-Trabalhos com um container que cont√©m itens;
-O container controla a disposi√ß√£o dos itens, mas os itens tamb√©m
podem alterar o seu posicionamento;
-Os grids s√£o divididos em colunas e linhas;
-Podemos inserir um espa√ßamento entre as √°reas com o recurso de gap;
-Por padr√£o os elementos j√° vem com stretch definido (esticar/ocupar todo o espa√ßo disponivel)
-Por padr√£o o GRID tenta ordenar os elementos seguindo a ordem que foram declarados no html
-Caso o elemento ja tenha um height e um width definidos ele seguira a posi√ß√£o do grid, caso n√£o tenha, ele ficar√° como stretch
-Se para grid-column-start/end ou grid-row-start/end se inicia a posi√ß√£o em 0 (posi√ß√£o igual o array), Ex.: posi√ß√£o 3 √© 4.
-Caso use valores POSITIVO, se posiciona na direita pra esquerda e valores POSITIVOS o contrario (esquerda para direita)


  Escrevendo sempre ambas grid-column-start e grid-column-end pode tornar-se cansativo. 
  Felizmente, grid-column √© uma propriedade abreviada que aceita os dois valores de uma s√≥ vez, separados por "/".
  Por exemplo, grid-column ou row: 2 / 4; estabelecer√° que o elemento comece na 2¬™ linha vertical da grelha e termine na 4¬™ linha.


    */



.containerComDivsDentro{
    color: white;
    background-color: #333;
    border: 3px solid red;
    padding: 15px;

    display: grid;

    grid-template-columns: 50px auto 10%; /*largura - define as colunas, pode passar quantos valores quiser (x x x x etc... - ali tem 3 ent√£o √© 3 colunas) - a 1 coluna tem 50px; 2 coluna √© automatica; 3 coluna √© 10% do tamanho do elemento pai*/
    grid-template-columns: repeat(3, 300px); /*fun√ß√£o repeat() - faz um numero ser repetido tantas vezes, no caso, repetindo 3 vezes o valor 300px (ou seja, 3 colunas de 300px) - numero de colunas de acordo com o tamanho disponivel em tela */
    grid-template-columns: repeat(autofill, 200px); /*fun√ß√£o repeat() - AUTOFILL = preencher numero de colunas de acordo com o tamanho disponivel em tela - ex: se ele tiver uma tela de 600px, ele preenchera com 3 colunas de 200px - ele aumenta/diminui dependendo do tamanho da tela*/
   /*RESPONSIVIDADE -> caso os elementos presentes internamente n√£o tenham nenhuma posi√ß√£o definida, eles ir√£o se adptar ao tamanho da tela. 
   Ex.: (s√£o 4 itens) em uma tela de 400px: ficam 2 colunas de 200px e os itens ficam distribuidos com 2 em cada linha
    2
    2     -> e caso a tela seja de 800px havera 4 colunas e eles ficaram distribuidos os 4 na mesma linha*/



    grid-template-rows: 70% 30%; /*altura - define as linhas - (cada valor representa uma linha, seguindo a ordem de cima pra baixo - 1,2,3,4,5... - nesse caso a 1a linha tem 70% e a 2a linha 30%)*/
    gap: 20px; /*serve para dar o mesmo espa√ßamento entre as linhas e as colunas */
    
    justify-content: center; /*alinha o grid no eixo horizontal - centro*/ 
    justify-content: start; /*alinha o grid no eixo horizontal - no inicio, lado esquerdo*/ 
    justify-content: end; /*alinha o grid no eixo horizontal - no fim, lado direito*/ 


    align-items: center; /*alinha o grid no eixo vertical - centro*/ 
    align-items: start; /*alinha o grid no eixo vertical - no inicio, superior*/ 
    align-items: end; /*alinha o grid no eixo vertical - no fim, inferior*/  


}
    .containerComDivsDentro div {
        background-color: #ccc;
        border: 1px solid blue;
        padding: 20px;  
    }

    
/*GRID AREA*/
/*seguindo um exemplo em que uma div contem as divisoes de um site: Cabe√ßalho, Sidebar, Conte√∫do, Rodap√©*/
    .container{
        color: white;
        background-color: #333;
        border: 3px solid red;
        padding: 15px;
        display: grid;
        gap: 5px; /*serve para dar o mesmo espa√ßamento entre as linhas e as colunas*/

        /*definindo as areas do template, grid-template-areas tambem pode ser usado para ordenar cada item, para n√£o precisar usar grid-column/grid-row*/
       /*quebrar uma linha para representar cada linha*/
        grid-template-areas: "header header header header"                     /*linha 1 - cabe√ßalho ocupando 100% da tela*/
                        "sidebar content content content"                      /*linha 2 - 1 texto e 3 textos*/
                        "nomeNaoUsado nomeNaoUsado nomeNaoUsado nomeNaoUsado"  /*dando um espa√ßo - o CSS procura a referencia, mas como ele n√£o encontra, ele deixa vazio*/
                        "footer footer footer footer"                          /*linha 3 - footer ocupando 100% da tela*/                     
        /*caso ache que algo est√° muito pequeno, basta aumentar a quantidade de elementos ali*/;
        /*para dar um espa√ßo entre eles, basta usar um nome que nunca sera usado*/
        } 
    
        .container div {
            background-color: #ccc;
            border: 1px solid blue;
            padding: 20px;  
        }
        #header{
            grid-area: header; /*qual area o id="header" representa no grid? ele representa o header*/
            /*regra individual mas que leva em considera√ß√£o o elemento pai*/
        }
        #sidebar{
            grid-area: sidebar; /*qual area o id="sidebar" representa no grid? ele representa o sidebar*/
            /*regra individual mas que leva em considera√ß√£o o elemento pai*/
            height: 50vh; /*estabelecento altura dessa area do grid*/
        }

        #content{
            grid-area: content;
            height: 50vh; /*estabelecento altura dessa area do grid*/
        }

        #footer{
            grid-area: footer;  
        }

/*MANIPULANDO ITENS INDIVIDUAIS DO GRID*/

.container{ /*container com 6 itens dentro*/
    color: white;
    background-color: #333;
    border: 3px solid red;
    padding: 15px;
    display: grid;
    gap: 5px; /*serve para dar o mesmo espa√ßamento entre as linhas e as colunas*/
    grid-template-columns: auto auto auto; /*largura - define as colunas, pode passar quantos valores quiser (x x x x etc... - ali tem 3 ent√£o √© 3 colunas) - a 1 coluna tem 50px; 2 coluna √© automatica; 3 coluna √© 10% do tamanho do elemento pai*/
    } 

    .container div {
        background-color: #ccc;
        border: 1px solid blue;
        padding: 20px;  
    }

#item-1{
    /*HORIZONTAL*/
    grid-column: 6; /*dizer qual coluna o item ir√° ocupar*/

        /*Tambem pode usar assim, para extender, dar um inicio e fim*/
    grid-column-start: 1; /*#item-1 come√ßa na coluna 1*/
    grid-column-end: 4;  /*#item-1 termina na coluna 4 - colocar 1 numero a mais, pois ele respeita 1 a menos*/

     /*VERTICAL*/
     grid-row: 7; /*dizer qual linha o item ir√° ocupar*/

         /*Tambem pode usar assim, para extender, dar um inicio e fim*/
     grid-row-start: 2; /*#item-2 come√ßa na linha 2 - pois na linha 1 j√° esta sendo ocupado pela #item-1*/
     grid-row-end: 4;  /*#item-2 termina na linha 4 */
}


#item-3{
    /*ALINHAMENTO DO #item-3 */

    /*JUSTIFY se usa para alinhar no EIXO X - HORIZONTAL*/
    justify-self: start; /*justify-self: posiciona na horizontal do item individual - no inicio*/
    justify-self: end; /*justify-self: posiciona na horizontal do item individual - no fim*/
    justify-self: start; /*justify-self: posiciona na horizontal do item individual - no inicio*/

    /*ALIGN se usa para alinhar no EIXO Y - VERTICAL*/
    align-self: center; /*posicionamento individual na vertical - centralizado*/
    align-self: start; /*posicionamento individual na vertical - no inicio*/
    align-self: end; /*posicionamento individual na vertical - no final*/
    align-self: stretch; /*posicionamento individual na vertical - esticar*/
}